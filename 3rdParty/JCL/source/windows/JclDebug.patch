--- JclDebug.pas.old	Sun Jul  6 21:44:08 2014
+++ JclDebug.pas	Sun Jul  6 21:26:39 2014
@@ -222,6 +222,7 @@
     Segment: Word;
     VA: DWORD; // VA relative to (module base address + $10000)
     LineNumber: Integer;
+    UnitName : PJclMapString;
   end;
 
   TJclMapScanner = class(TJclAbstractMapParser)
@@ -234,6 +235,7 @@
     FLineNumbersCnt: Integer;
     FLineNumberErrors: Integer;
     FNewUnitFileName: PJclMapString;
+    FCurrentUnitName : PJclMapString;
     FProcNamesCnt: Integer;
     FSegmentCnt: Integer;
     FLastAccessedSegementIndex: Integer;
@@ -247,6 +249,10 @@
     procedure LineNumbersItem(LineNumber: Integer; const Address: TJclMapAddress); override;
     procedure LineNumberUnitItem(UnitName, UnitFileName: PJclMapString); override;
     procedure Scan;
+    function GetLineNumberByIndex(Index:Integer):TJCLMapLineNumber;
+    function GetLineNumberCount():Integer;
+    function GetSegmentByIndex(Index : Integer):TJCLMapSegment;
+    function GetSegmentCount:Integer;
   public
     constructor Create(const MapFileName: TFileName; Module: HMODULE); override;
 
@@ -257,12 +263,17 @@
     // Addr are virtual addresses relative to (module base address + $10000)
     function LineNumberFromAddr(Addr: DWORD): Integer; overload;
     function LineNumberFromAddr(Addr: DWORD; out Offset: Integer): Integer; overload;
+    function SegmentFromAddr(Addr: DWORD):TJclMapSegment;
     function ModuleNameFromAddr(Addr: DWORD): string;
     function ModuleStartFromAddr(Addr: DWORD): DWORD;
     function ProcNameFromAddr(Addr: DWORD): string; overload;
     function ProcNameFromAddr(Addr: DWORD; out Offset: Integer): string; overload;
     function SourceNameFromAddr(Addr: DWORD): string;
     property LineNumberErrors: Integer read FLineNumberErrors;
+    property LineNumberCount:Integer read GetLineNumberCount;
+    property LineNumberByIndex[index : integer]:TJclMapLineNumber read GetLineNumberByIndex;
+    property SegmentCount : Integer read GetSegmentCount;
+    property SegmentByIndex[index : integer]:TJclMapSegment read GetSegmentByIndex;
   end;
 
 type
@@ -1847,6 +1858,7 @@
     FLineNumbers[FLineNumbersCnt].Segment := FSegmentClasses[SegIndex].Segment;
     FLineNumbers[FLineNumbersCnt].VA := VA;
     FLineNumbers[FLineNumbersCnt].LineNumber := LineNumber;
+    FLineNumbers[FLineNumbersCnt].UnitName :=  FCurrentUnitName;
     Inc(FLineNumbersCnt);
     Added := True;
     if FNewUnitFileName <> nil then
@@ -1867,8 +1879,29 @@
 procedure TJclMapScanner.LineNumberUnitItem(UnitName, UnitFileName: PJclMapString);
 begin
   FNewUnitFileName := UnitFileName;
+  FCurrentUnitName := UnitName;
 end;
 
+function TJclMapScanner.GetLineNumberByIndex(Index: Integer): TJCLMapLineNumber;
+begin
+  result := FLineNumbers[Index];
+end;
+
+function TJclMapScanner.GetLineNumberCount(): Integer;
+begin
+  result := FLineNumbersCnt;
+end;
+
+function TJclMapScanner.GetSegmentByIndex(Index: Integer): TJCLMapSegment;
+begin
+  result := FSegments[Index];
+end;
+
+function TJclMapScanner.GetSegmentCount(): Integer;
+begin
+  result := FSegmentCnt;
+end;
+
 function TJclMapScanner.IndexOfSegment(Addr: DWORD): Integer;
 var
   L, R: Integer;
@@ -1915,6 +1948,18 @@
     Result := '';
 end;
 
+function TJclMapScanner.SegmentFromAddr(Addr: DWORD): TJclMapSegment;
+var
+  I: Integer;
+begin
+  for I := Length(FSegments) - 1 downto 0 do
+    if (FSegments[I].StartVA <= Addr) and (Addr < FSegments[I].EndVA) then
+    begin
+      Result := FSegments[I];
+      Break;
+    end;
+end;
+
 function TJclMapScanner.ModuleStartFromAddr(Addr: DWORD): DWORD;
 var
   I: Integer;
